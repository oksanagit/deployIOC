##########################
#
# ADEiger is the role now
#
##########################   
      # Check if binaries exists, not sure if needed script will fail if binaries are not accesible. 
    
      - name: check if binary exists
        shell: 'ls "{{ deployment_dir }}"/support/areaDetector/ADProsilica/iocs/prosilicaIOC/bin/linux-x86_64/prosilicaApp'

      # Check it envPath exists and is symbolyc link, if yes, don't overwrite, if no generate one. 
      # If EPICS areaDetector support is not built on the target server, but delivered via binaries build elsewhere, 
      # envpaths needs to be generated
      - stat:
          path: "{{root_ioc_dir}}/{{ioc_name}}/envPaths"
        register: st
  
      - fail:
          msg: "envPaths exists and is a link"
        when: generateEnvPaths == "YES" and st.stat.islnk is defined and st.stat.islnk==True  

      - name: create envPaths soft link
        file:
            src: "{{ deployment_dir }}/support/areaDetector/ADEiger/iocs/eigerIOC/iocBoot/iocEiger/envPaths"
            dest: "{{root_ioc_dir}}/{{ioc_name}}/envPaths"
            owner: softioc
            group: controls
            mode: u=r,g=r,o=r
            state: link
        when: generateEnvPaths == "NO"

      - name: create envPaths for binary deployment in a different folder than it was compiled in
        blockinfile:
            dest: "{{root_ioc_dir}}/{{ioc_name}}/envPaths"
            create: yes
            owner: softioc
            group: controls
            mode: u=r,g=r,o=r
            block: |
              epicsEnvSet("IOC","iocEiger")
              epicsEnvSet("TOP","{{ deployment_dir }}/support/areaDetector/ADEiger/iocs/eigerIOC")
              epicsEnvSet("ADPROSILICA","{{ deployment_dir }}/support/areaDetector/ADEiger/iocs/eigerIOC/../..")
              epicsEnvSet("SUPPORT","{{ deployment_dir }}/support")
              epicsEnvSet("ASYN","{{ deployment_dir }}/support/asyn")
              epicsEnvSet("AREA_DETECTOR","{{ deployment_dir }}/support/areaDetector")
              epicsEnvSet("ADSUPPORT","{{ deployment_dir }}/support/areaDetector/ADSupport")
              epicsEnvSet("ADCORE","{{ deployment_dir }}/support/areaDetector/ADCore")
              epicsEnvSet("AUTOSAVE","{{ deployment_dir }}/support/autosave")
              epicsEnvSet("BUSY","{{ deployment_dir }}/support/busy")
              epicsEnvSet("CALC","{{ deployment_dir }}/support/calc")
              epicsEnvSet("SNCSEQ","{{ deployment_dir }}/support/seq")
              epicsEnvSet("SSCAN","{{ deployment_dir }}/support/sscan")
              epicsEnvSet("DEVIOCSTATS","{{ deployment_dir }}/support/iocStats")
              epicsEnvSet("EPICS_BASE","{{ deployment_dir }}/epics-base")
        when: generateEnvPaths == "YES"      
   

      - name: create auto_settings.req soft link
        file:
            src: "{{ deployment_dir }}/support/areaDetector/ADEiger/iocs/eigerIOC/iocBoot/iocEiger/auto_settings.req"
            dest: "{{root_ioc_dir}}/{{ioc_name}}/auto_settings.req"
            owner: softioc
            group: controls
            mode: u=r,g=r,o=r
            state: link

      - name: copy eiger st.cmd to ioc_name
        copy:
            src: "{{ deployment_dir }}/support/areaDetector/ADEiger/iocs/eigerIOC/iocBoot/iocEiger/st.cmd"
            remote_src: yes
            dest: "{{root_ioc_dir}}/{{ioc_name}}/st.cmd"
            owner: softioc
            group: controls
            mode: u=rwx,g=rwx,o=rx 
            force: no     

      - name: enter correct path to ADEiger executable
        replace:
          path: "{{root_ioc_dir}}/{{ioc_name}}/st.cmd"
          regexp: '#!../..'
          replace: "#!{{ deployment_dir }}/support/areaDetector/ADEiger/iocs/eigerIOC"

      - name: Enter EIGERIP    
        replace:
          path: "{{root_ioc_dir}}/{{ioc_name}}/st.cmd"
      #    regexp: '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}'
      #    after: 'epicsEnvSet\(\"EIGERIP\", \"'
      #    replace: "{{ DETECTOR_IP }}" 
          regexp: 'epicsEnvSet\(\"EIGERIP\", \"[0-9.]*\"\)'
          replace: 'epicsEnvSet("EIGERIP", "{{ DETECTOR_IP }}")'